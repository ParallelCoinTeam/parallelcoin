package main

import (
	"encoding/hex"
	"errors"
	"log"
	"time"

	"github.com/p9c/pod/pkg/chain/hash"
	"github.com/p9c/pod/pkg/db"
)

// fetchBlockCmd defines the configuration options for the fetchblock command.
type fetchBlockCmd struct{}

var (
	// fetchBlockCfg defines the configuration options for the command.
	fetchBlockCfg = fetchBlockCmd{}
)

// Execute is the main entry point for the command.  It's invoked by the parser.
func (cmd *fetchBlockCmd) Execute(args []string) (e error) {
	// Setup the global config options and ensure they are valid.
	if e := setupGlobalConfig(); dbg.Chk(e) {
		return err
	}
	if len(args) < 1 {
		return errors.New("required block hash parameter not specified")
	}
	blockHash, e := chainhash.NewHashFromStr(args[0])
	if e != nil  {
		L.return err
	}
	// Load the block database.
	db, e := loadBlockDB()
	if e != nil  {
		L.return err
	}
	defer db.Close()
	return db.View(func(tx database.Tx) (e error) {
		L.inf.F("Fetching block %s", blockHash)
		startTime := time.Now()
		blockBytes, e := tx.FetchBlock(blockHash)
		if e != nil  {
		L.return err
		}
		L.inf.F("Loaded block in %v", time.Since(startTime))
		L.inf.F("Block Hex: %s", hex.EncodeToString(blockBytes))
		return nil
	})
}

// Usage overrides the usage display for the command.
func (cmd *fetchBlockCmd) Usage() string {
	return "<block-hash>"
}
