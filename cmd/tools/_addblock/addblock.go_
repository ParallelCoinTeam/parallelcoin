package main

import (
	"os"
	"path/filepath"
	"runtime"

	"github.com/p9c/pod/pkg/chain"
	"github.com/p9c/pod/pkg/chain/indexers"
	"github.com/p9c/pod/pkg/db"
	"github.com/p9c/pod/pkg/limits"
	l "github.com/p9c/pod/pkg/logi"
)

const (
	// blockDbNamePrefix is the prefix for the pod block database.
	blockDbNamePrefix = "blocks"
)

var (
	cfg *config
	log l.Logger
)

// loadBlockDB opens the block database and returns a handle to it.
func loadBlockDB(	) (database.DB, error) {

	// The database name is based on the database type.
	dbName := blockDbNamePrefix + "_" + cfg.DbType
	dbPath := filepath.Join(cfg.DataDir, dbName)
	L.inf.F("Loading block database from '%s'", dbPath)
	db, e := database.Open(cfg.DbType, dbPath, activeNetParams.Net)
	if e != nil  {
		L.// Return the error if it's not because the database doesn't exist.
		if dbErr, ok := err.(database.Error); !ok || dbErr.ErrorCode !=
			database.ErrDbDoesNotExist {
			return nil, e
		}
		// Create the db if it does not exist.
		e = os.MkdirAll(cfg.DataDir, 0700)
		if e != nil  {
		L.return nil, e
		}
		db, e = database.Create(cfg.DbType, dbPath, activeNetParams.Net)
		if e != nil  {
		L.return nil, e
		}
	}
	L.inf.Ln("Block database loaded")
	return db, nil
}

// realMain is the real main function for the utility.  It is necessary to work around the fact that deferred functions do not run when os.Exit() is called.
func realMain(	) (e error) {
	// Load configuration and parse command line.
	tcfg, _, e = loadConfig()
	if e != nil  {
		L.return err
	}
	cfg = tcfg
	// Setup logging.
	backendLogger := log.NewBackend(os.Stdout)
	defer os.Stdout.Sync()
	log = backendLogger.Logger("MAIN")
	database.UseLogger(backendLogger.Logger("BCDB"))
	blockchain.UseLogger(backendLogger.Logger("CHAN"))
	indexers.UseLogger(backendLogger.Logger("INDX"))
	// Load the block database.
	db, e := loadBlockDB()
	if e != nil  {
		L.L.Errorf("Failed to load database: %v", err)
		return err
	}
	defer db.Close()
	fi, e := os.Open(cfg.InFile)
	if e != nil  {
		L.L.Errorf("Failed to open file %v: %v", cfg.InFile, err)
		return err
	}
	defer fi.Close()
	// Create a block importer for the database and input file and start it. The done channel returned from start will contain an error if anything went wrong.
	importer, e := newBlockImporter(db, fi)
	if e != nil  {
		L.L.Errorf("Failed create block importer: %v", err)
		return err
	}
	// Perform the import asynchronously.  This allows blocks to be processed and read in parallel.  The results channel returned from Import contains the statistics about the import including an error if something went wrong.
	L.inf.Ln("Starting import")
	resultsChan := importer.Import()
	results := <-resultsChan
	if results.err != nil {
		L.Errorf("%v", results.err)
		return results.err
	}
	L.inf.F("Processed a total of %d blocks (%d imported, %d already "+
		"known)", results.blocksProcessed, results.blocksImported,
		results.blocksProcessed-results.blocksImported)
	return nil
}
func main(	) {

	// Use all processor cores and up some limits.
	runtime.GOMAXPROCS(runtime.NumCPU())
	if e := limits.SetLimits(); dbg.Chk(e) {
		os.Exit(1)
	}
	// Work around defer not working after os.Exit()
	if e := realMain(); dbg.Chk(e) {
		os.Exit(1)
	}
}
