package podcfg

import (
	"github.com/p9c/pod/pkg/appdata"
	"github.com/p9c/pod/pkg/chaincfg"
	"github.com/p9c/pod/pkg/opts"
	"github.com/p9c/pod/pkg/opts/binary"
	"github.com/p9c/pod/pkg/opts/duration"
	"github.com/p9c/pod/pkg/opts/float"
	"github.com/p9c/pod/pkg/opts/integer"
	"github.com/p9c/pod/pkg/opts/list"
	"github.com/p9c/pod/pkg/opts/meta"
	"github.com/p9c/pod/pkg/opts/text"
	uberatomic "go.uber.org/atomic"
	"math/rand"
	"net"
	"path/filepath"
	"sync/atomic"
	"time"
)

// GetDefaultConfig returns a Config struct pristine factory fresh
func GetDefaultConfig() (c *opts.Config) {
	network := "mainnet"
	rand.Seed(time.Now().Unix())
	var datadir = &atomic.Value{}
	datadir.Store([]byte(appdata.Dir(opts.Name, false)))
	c = &opts.Config{
		Commands: opts.GetCommands(),
		AddCheckpoints: list.New(meta.Data{
			Option:  "addcheckpoint",
			Aliases: []string{"AC"},
			Group:   "debug",
			Label:   "Add Checkpoints",
			Description:
			"add custom checkpoints",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{},
		),
		AddPeers: list.New(meta.Data{
			Option:  "addpeer",
			Aliases: []string{"AP"},
			Group:   "node",
			Label:   "Add Peers",
			Description:
			"manually adds addresses to try to connect to",
			Type:   "ipaddress",
			Widget: "multi",
			// Hook:        "addpeer",
			OmitEmpty: true,
		},
			[]string{},
			// []string{"127.0.0.1:12345", "127.0.0.1:12345", "127.0.0.1:12345", "127.0.0.1:12344"},
		),
		AddrIndex: binary.New(meta.Data{
			Option:  "addrindex",
			Aliases: []string{"AI"},
			Group:   "node",
			Label:   "Address Index",
			Description:
			"maintain a full address-based transaction index which makes the searchrawtransactions RPC available",
			Widget: "toggle",
			// Hook:        "dropaddrindex",
			OmitEmpty: true,
		},
			false,
		),
		AutoPorts: binary.New(meta.Data{
			Option: "autoports",
			Group:  "debug",
			Label:  "Automatic Ports",
			Description:
			"RPC and controller ports are randomized, use with controller for automatic peer discovery",
			Widget: "toggle",
			// Hook: "restart",
			OmitEmpty: true,
		},
			false,
		),
		AutoListen: binary.New(meta.Data{
			Option:  "autolisten",
			Aliases: []string{"AL"},
			Group:   "node",
			Label:   "Automatic Listeners",
			Description:
			"automatically update inbound addresses dynamically according to discovered network interfaces",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			true,
		),
		BanDuration: duration.New(meta.Data{
			Option:  "banduration",
			Aliases: []string{"BD"},
			Group:   "debug",
			Label:   "Ban Opt",
			Description:
			"how long a ban of a misbehaving peer lasts",
			Widget: "duration",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			time.Hour*24,
		),
		BanThreshold: integer.New(meta.Data{
			Option:  "banthreshold",
			Aliases: []string{"BT"},
			Group:   "debug",
			Label:   "Ban Threshold",
			Description:
			"ban score that triggers a ban (default 100)",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultBanThreshold,
		),
		BlockMaxSize: integer.New(meta.Data{
			Option:  "blockmaxsize",
			Aliases: []string{"BMXS"},
			Group:   "mining",
			Label:   "Block Max Size",
			Description:
			"maximum block size in bytes to be used when creating a block",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.BlockMaxSizeMax,
		),
		BlockMaxWeight: integer.New(meta.Data{
			Option:  "blockmaxweight",
			Aliases: []string{"BMXW"},
			Group:   "mining",
			Label:   "Block Max Weight",
			Description:
			"maximum block weight to be used when creating a block",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.BlockMaxWeightMax,
		),
		BlockMinSize: integer.New(meta.Data{
			Option:  "blockminsize",
			Aliases: []string{"BMS"},
			Group:   "mining",
			Label:   "Block Min Size",
			Description:
			"minimum block size in bytes to be used when creating a block",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.BlockMaxSizeMin,
		),
		BlockMinWeight: integer.New(meta.Data{
			Option:  "blockminweight",
			Aliases: []string{"BMW"},
			Group:   "mining",
			Label:   "Block Min Weight",
			Description:
			"minimum block weight to be used when creating a block",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.BlockMaxWeightMin,
		),
		BlockPrioritySize: integer.New(meta.Data{
			Option:  "blockprioritysize",
			Aliases: []string{"BPS"},
			Group:   "mining",
			Label:   "Block Priority Size",
			Description:
			"size in bytes for high-priority/low-fee transactions when creating a block",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultBlockPrioritySize,
		),
		BlocksOnly: binary.New(meta.Data{
			Option:  "blocksonly",
			Aliases: []string{"BO"},
			Group:   "node",
			Label:   "Blocks Only",
			Description:
			"do not accept transactions from remote peers",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		CAFile: text.New(meta.Data{
			Option:  "cafile",
			Aliases: []string{"CA"},
			Group:   "tls",
			Label:   "Certificate Authority File",
			Description:
			"certificate authority file for TLS certificate validation",
			Type:   "path",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			filepath.Join(string(datadir.Load().([]byte)), "ca.cert"),
		),
		ConfigFile: text.New(meta.Data{
			Option:  "configfile",
			Aliases: []string{"CF"},
			Label:   "Configuration File",
			Description:
			"location of configuration file, cannot actually be changed",
			Type:   "path",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			filepath.Join(string(datadir.Load().([]byte)), opts.PodConfigFilename),
		),
		ConnectPeers: list.New(meta.Data{
			Option: "connect",
			// Aliases: []string{"cp"},
			Group: "node",
			Label: "Connect Peers",
			Description:
			"connect ONLY to these addresses (disables inbound connections)",
			Type:   "address",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{},
		),
		Controller: binary.New(meta.Data{
			Option:  "controller",
			Aliases: []string{"CN"},
			Group:   "node",
			Label:   "Enable Controller",
			Description:
			"delivers mining jobs over multicast",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		CPUProfile: text.New(meta.Data{
			Option:  "cpuprofile",
			Aliases: []string{"CP"},
			Group:   "debug",
			Label:   "CPU Profile",
			Description:
			"write cpu profile to this file",
			Type:   "path",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"",
		),
		DarkTheme: binary.New(meta.Data{
			Option:  "darktheme",
			Aliases: []string{"DT"},
			Group:   "config",
			Label:   "Dark Theme",
			Description:
			"sets dark theme for GUI",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		DataDir: &text.Opt{
			Value: datadir,
			Data: meta.Data{
				Option:  "datadir",
				Aliases: []string{"DD"},
				Label:   "Data Directory",
				Description:
				"root folder where application data is stored",
				Type:      "directory",
				Widget:    "string",
				OmitEmpty: true,
			},
			Def: appdata.Dir(opts.Name, false),
		},
		DbType: text.New(meta.Data{
			Option:  "dbtype",
			Aliases: []string{"DB"},
			Group:   "debug",
			Label:   "Database Type",
			Description:
			"type of database storage engine to use (only one right now, ffldb)",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultDbType,
		),
		DisableBanning: binary.New(meta.Data{
			Option:  "nobanning",
			Aliases: []string{"NB"},
			Group:   "debug",
			Label:   "Disable Banning",
			Description:
			"disables banning of misbehaving peers",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		DisableCheckpoints: binary.New(meta.Data{
			Option:  "nocheckpoints",
			Aliases: []string{"NCP"},
			Group:   "debug",
			Label:   "Disable Checkpoints",
			Description:
			"disables all checkpoints",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		DisableDNSSeed: binary.New(meta.Data{
			Option:  "nodnsseed",
			Aliases: []string{"NDS"},
			Group:   "node",
			Label:   "Disable DNS Seed",
			Description:
			"disable seeding of addresses to peers",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		DisableListen: binary.New(meta.Data{
			Option:  "nolisten",
			Aliases: []string{"NL"},
			Group:   "node",
			Label:   "Disable Listen",
			Description:
			"disables inbound connections for the peer to peer network",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		DisableRPC: binary.New(meta.Data{
			Option:  "norpc",
			Aliases: []string{"NRPC"},
			Group:   "rpc",
			Label:   "Disable RPC",
			Description:
			"disable rpc servers, as well as kopach controller",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		Discovery: binary.New(meta.Data{
			Option:  "discover",
			Aliases: []string{"DI"},
			Group:   "node",
			Label:   "Disovery",
			Description:
			"enable LAN peer discovery in GUI",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		ExternalIPs: list.New(meta.Data{
			Option:  "externalip",
			Aliases: []string{"EI"},
			Group:   "node",
			Label:   "External IP Addresses",
			Description:
			"extra addresses to tell peers they can connect to",
			Type:   "address",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{},
		),
		FreeTxRelayLimit: float.NewFloat(meta.Data{
			Option:  "limitfreerelay",
			Aliases: []string{"LR"},
			Group:   "policy",
			Label:   "Free Tx Relay Limit",
			Description:
			"limit relay of transactions with no transaction fee to the given amount in thousands of bytes per minute",
			Widget: "float",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultFreeTxRelayLimit,
		),
		Generate: binary.New(meta.Data{
			Option:  "generate",
			Aliases: []string{"GB"},
			Group:   "mining",
			Label:   "Generate Blocks",
			Description:
			"turn on Kopach CPU miner",
			Widget: "toggle",
			// Hook:        "generate",
			OmitEmpty: true,
		},
			false,
		),
		GenThreads: integer.New(meta.Data{
			Option:  "genthreads",
			Aliases: []string{"GT"},
			Group:   "mining",
			Label:   "Generate Threads",
			Description:
			"number of threads to mine with",
			Widget: "integer",
			// Hook:        "genthreads",
			OmitEmpty: true,
		},
			-1,
		),
		Hilite: list.New(meta.Data{
			Option:  "highlight",
			Aliases: []string{"HL"},
			Group:   "debug",
			Label:   "Hilite",
			Description:
			"list of packages that will print with attention getters",
			Type:   "string",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{},
		),
		LAN: binary.New(meta.Data{
			Option: "lan",
			Group:  "debug",
			Label:  "LAN Testnet Mode",
			Description:
			"run without any connection to nodes on the internet (does not apply on mainnet)",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		Locale: text.New(meta.Data{
			Option:  "locale",
			Aliases: []string{"LC"},
			Group:   "config",
			Label:   "Language",
			Description:
			"user interface language i18 localization",
			Widget: "string",
			// Hook:        "language",
			OmitEmpty: true,
		},
			"en",
		),
		LimitPass: text.New(meta.Data{
			Option:  "limitpass",
			Aliases: []string{"LP"},
			Group:   "rpc",
			Label:   "Limit Password",
			Description:
			"limited user password",
			Widget: "password",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.genPassword(),
		),
		LimitUser: text.New(meta.Data{
			Option:  "limituser",
			Aliases: []string{"LU"},
			Group:   "rpc",
			Label:   "Limit Username",
			Description:
			"limited user name",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"limit",
		),
		LogDir: text.New(meta.Data{
			Option:  "logdir",
			Aliases: []string{"LD"},
			Group:   "config",
			Label:   "Log Directory",
			Description:
			"folder where log files are written",
			Type:   "directory",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			string(datadir.Load().([]byte)),
		),
		LogFilter: list.New(meta.Data{
			Option:  "logfilter",
			Aliases: []string{"LF"},
			Group:   "debug",
			Label:   "Log Filter",
			Description:
			"list of packages that will not print logs",
			Type:   "string",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{},
		),
		LogLevel: text.New(meta.Data{
			Option:  "loglevel",
			Aliases: []string{"LL"},
			Group:   "config",
			Label:   "Log Level",
			Description:
			"maximum log level to output\n(fatal error check warning info debug trace - what is selected includes all items to the left of the one in that list)",
			Widget: "radio",
			Options: []string{"off",
				"fatal",
				"error",
				"info",
				"check",
				"debug",
				"trace",
			},
			// Hook:        "loglevel",
			OmitEmpty: true,
		},
			"info",
		),
		MaxOrphanTxs: integer.New(meta.Data{
			Option:  "maxorphantx",
			Aliases: []string{"MO"},
			Group:   "policy",
			Label:   "Max Orphan Txs",
			Description:
			"max number of orphan transactions to keep in memory",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultMaxOrphanTransactions,
		),
		MaxPeers: integer.New(meta.Data{
			Option:  "maxpeers",
			Aliases: []string{"MP"},
			Group:   "node",
			Label:   "Max Peers",
			Description:
			"maximum number of peers to hold connections with",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultMaxPeers,
		),
		MulticastPass: text.New(meta.Data{
			Option:  "minerpass",
			Aliases: []string{"PM"},
			Group:   "config",
			Label:   "Multicast Pass",
			Description:
			"password that encrypts the connection to the mining controller",
			Widget: "password",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"pa55word",
		),
		MinRelayTxFee: float.NewFloat(meta.Data{
			Option:  "minrelaytxfee",
			Aliases: []string{"MRTF"},
			Group:   "policy",
			Label:   "Min Relay Transaction Fee",
			Description:
			"the minimum transaction fee in DUO/kB to be considered a non-zero fee",
			Widget: "float",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultMinRelayTxFee.ToDUO(),
		),
		Network: text.New(meta.Data{
			Option:  "network",
			Aliases: []string{"NW"},
			Group:   "node",
			Label:   "Network",
			Description:
			"connect to this network: (mainnet, testnet)",
			Widget: "radio",
			Options: []string{"mainnet",
				"testnet",
				"regtestnet",
				"simnet",
			},
			// Hook:        "restart",
			OmitEmpty: true,
		},
			network,
		),
		NoCFilters: binary.New(meta.Data{
			Option:  "nocfilters",
			Aliases: []string{"NCF"},
			Group:   "node",
			Label:   "No CFilters",
			Description:
			"disable committed filtering (CF) support",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		NodeOff: binary.New(meta.Data{
			Option:  "nodeoff",
			Aliases: []string{"NO"},
			Group:   "debug",
			Label:   "Node Off",
			Description:
			"turn off the node backend",
			Widget: "toggle",
			// Hook:        "node",
			OmitEmpty: true,
		},
			false,
		),
		NoInitialLoad: binary.New(meta.Data{
			Option:  "noinitialload",
			Aliases: []string{"NIL"},
			Label:   "No Initial Load",
			Description:
			"do not load a wallet at startup",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		NoPeerBloomFilters: binary.New(meta.Data{
			Option:  "nopeerbloomfilters",
			Aliases: []string{"NPBF"},
			Group:   "node",
			Label:   "No Peer Bloom Filters",
			Description:
			"disable bloom filtering support",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		NoRelayPriority: binary.New(meta.Data{
			Option:  "norelaypriority",
			Aliases: []string{"NRPR"},
			Group:   "policy",
			Label:   "No Relay Priority",
			Description:
			"do not require free or low-fee transactions to have high priority for relaying",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		OneTimeTLSKey: binary.New(meta.Data{
			Option:  "onetimetlskey",
			Aliases: []string{"OTK"},
			Group:   "wallet",
			Label:   "One Time TLS Key",
			Description:
			"generate a new TLS certificate pair at startup, but only write the certificate to disk",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		OnionEnabled: binary.New(meta.Data{
			Option:  "onionEnabled",
			Aliases: []string{"OE"},
			Group:   "proxy",
			Label:   "Onion Enabled",
			Description:
			"enable tor proxy",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		OnionProxy: text.New(meta.Data{
			Option:  "onionenabled",
			Aliases: []string{"OA"},
			Group:   "proxy",
			Label:   "Onion Proxy Address",
			Description:
			"address of tor proxy you want to connect to",
			Type:   "address",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"",
		),
		OnionProxyPass: text.New(meta.Data{
			Option:  "onionproxypass",
			Aliases: []string{"OPW"},
			Group:   "proxy",
			Label:   "Onion Proxy Password",
			Description:
			"password for tor proxy",
			Widget: "password",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"",
		),
		OnionProxyUser: text.New(meta.Data{
			Option:  "onionproxyuser",
			Aliases: []string{"OU"},
			Group:   "proxy",
			Label:   "Onion Proxy Username",
			Description:
			"tor proxy username",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"",
		),
		P2PConnect: list.New(meta.Data{
			Option:  "p2pconnect",
			Aliases: []string{"P2P"},
			Group:   "node",
			Label:   "P2P Connect",
			Description:
			"list of addresses reachable from connected networks",
			Type:   "address",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{},
		),
		P2PListeners: list.New(meta.Data{
			Option:  "listen",
			Aliases: []string{"LA"},
			Group:   "node",
			Label:   "P2PListeners",
			Description:
			"list of addresses to bind the node listener to",
			Type:   "address",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{net.JoinHostPort("0.0.0.0",
				chaincfg.MainNetParams.DefaultPort,
			),
			},
		),
		Password: text.New(meta.Data{
			Option:  "password",
			Aliases: []string{"PW"},
			Group:   "rpc",
			Label:   "Password",
			Description:
			"password for client RPC connections",
			Type:   "password",
			Widget: "password",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.genPassword(),
		),
		PipeLog: binary.New(meta.Data{
			Option:  "pipelog",
			Aliases: []string{"PL"},
			Label:   "Pipe Logger",
			Description:
			"enable pipe based logger IPC",
			Widget: "toggle",
			// Hook:        "",
			OmitEmpty: true,
		},
			false,
		),
		Profile: text.New(meta.Data{
			Option:  "profile",
			Aliases: []string{"PR"},
			Group:   "debug",
			Label:   "Profile",
			Description:
			"http profiling on given port (1024-40000)",
			// Type:        "",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"",
		),
		ProxyAddress: text.New(meta.Data{
			Option:  "proxyaddress",
			Aliases: []string{"PA"},
			Group:   "proxy",
			Label:   "Proxy",
			Description:
			"address of proxy to connect to for outbound connections",
			Type:   "url",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"",
		),
		ProxyPass: text.New(meta.Data{
			Option:  "proxypass",
			Aliases: []string{"PPW"},
			Group:   "proxy",
			Label:   "Proxy Pass",
			Description:
			"proxy password, if required",
			Type:   "password",
			Widget: "password",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.genPassword(),
		),
		ProxyUser: text.New(meta.Data{
			Option:  "proxyuser",
			Aliases: []string{"PU"},
			Group:   "proxy",
			Label:   "ProxyUser",
			Description:
			"proxy username, if required",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"proxyuser",
		),
		RejectNonStd: binary.New(meta.Data{
			Option:  "rejectnonstd",
			Aliases: []string{"REJ"},
			Group:   "node",
			Label:   "Reject Non Std",
			Description:
			"reject non-standard transactions regardless of the default settings for the active network",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		RelayNonStd: binary.New(meta.Data{
			Option:  "relaynonstd",
			Aliases: []string{"RNS"},
			Group:   "node",
			Label:   "Relay Nonstandard Transactions",
			Description:
			"relay non-standard transactions regardless of the default settings for the active network",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		RPCCert: text.New(meta.Data{
			Option:  "rpccert",
			Aliases: []string{"RC"},
			Group:   "rpc",
			Label:   "RPC Cert",
			Description:
			"location of RPC TLS certificate",
			Type:   "path",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			filepath.Join(string(datadir.Load().([]byte)), "rpc.cert"),
		),
		RPCConnect: text.New(meta.Data{
			Option:  "rpcconnect",
			Aliases: []string{"RA"},
			Group:   "wallet",
			Label:   "RPC Connect",
			Description:
			"full node RPC for wallet",
			Type:   "address",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			net.JoinHostPort("127.0.0.1", chaincfg.MainNetParams.DefaultPort),
		
		),
		RPCKey: text.New(meta.Data{
			Option:  "rpckey",
			Aliases: []string{"RK"},
			Group:   "rpc",
			Label:   "RPC Key",
			Description:
			"location of rpc TLS key",
			Type:   "path",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			filepath.Join(string(datadir.Load().([]byte)), "rpc.key"),
		),
		RPCListeners: list.New(meta.Data{
			Option:  "rpclisten",
			Aliases: []string{"RL"},
			Group:   "rpc",
			Label:   "RPC Listeners",
			Description:
			"addresses to listen for RPC connections",
			Type:   "address",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{net.JoinHostPort("127.0.0.1",
				chaincfg.MainNetParams.DefaultPort,
			),
			},
		),
		RPCMaxClients: integer.New(meta.Data{
			Option:  "rpcmaxclients",
			Aliases: []string{"RMXC"},
			Group:   "rpc",
			Label:   "Maximum RPC Clients",
			Description:
			"maximum number of clients for regular RPC",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultMaxRPCClients,
		),
		RPCMaxConcurrentReqs: integer.New(meta.Data{
			Option:  "rpcmaxconcurrentreqs",
			Aliases: []string{"RMCR"},
			Group:   "rpc",
			Label:   "Maximum RPC Concurrent Reqs",
			Description:
			"maximum number of requests to process concurrently",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultMaxRPCConcurrentReqs,
		),
		RPCMaxWebsockets: integer.New(meta.Data{
			Option:  "rpcmaxwebsockets",
			Aliases: []string{"RMWS"},
			Group:   "rpc",
			Label:   "Maximum RPC Websockets",
			Description:
			"maximum number of websocket clients to allow",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultMaxRPCWebsockets,
		),
		RPCQuirks: binary.New(meta.Data{
			Option:  "rpcquirks",
			Aliases: []string{"RQ"},
			Group:   "rpc",
			Label:   "RPC Quirks",
			Description:
			"enable bugs that replicate bitcoin core RPC's JSON",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		RunAsService: binary.New(meta.Data{
			Option:  "runasservice",
			Aliases: []string{"RS"},
			Label:   "Run As Service",
			Description:
			"shuts down on lock timeout",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		Save: binary.New(meta.Data{
			Option:  "save",
			Aliases: []string{"SV"},
			Label:   "Save Configuration",
			Description:
			"save opts given on commandline",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		ServerPass: text.New(meta.Data{
			Option:  "serverpass",
			Aliases: []string{"SPW"},
			Group:   "rpc",
			Label:   "Server Pass",
			Description:
			"password for server connections",
			Type:   "password",
			Widget: "password",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.genPassword(),
		),
		ServerTLS: binary.New(meta.Data{
			Option:  "servertls",
			Aliases: []string{"ST"},
			Group:   "wallet",
			Label:   "Server TLS",
			Description:
			"enable TLS for the wallet connection to node RPC server",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			true,
		),
		ServerUser: text.New(meta.Data{
			Option:  "serveruser",
			Aliases: []string{"SU"},
			Group:   "rpc",
			Label:   "Server User",
			Description:
			"username for chain server connections",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"client",
		),
		SigCacheMaxSize: integer.New(meta.Data{
			Option:  "sigcachemaxsize",
			Aliases: []string{"SCM"},
			Group:   "node",
			Label:   "Signature Cache Max Size",
			Description:
			"the maximum number of entries in the signature verification cache",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultSigCacheMaxSize,
		),
		Solo: binary.New(meta.Data{
			Option: "solo",
			Group:  "mining",
			Label:  "Solo Generate",
			Description:
			"mine even if not connected to a network",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		ClientTLS: binary.New(meta.Data{
			Option:  "clienttls",
			Aliases: []string{"CT"},
			Group:   "tls",
			Label:   "TLS",
			Description:
			"enable TLS for RPC client connections",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			true,
		),
		TLSSkipVerify: binary.New(meta.Data{
			Option:  "tlsskipverify",
			Aliases: []string{"TSV"},
			Group:   "tls",
			Label:   "TLS Skip Verify",
			Description:
			"skip TLS certificate verification (ignore CA errors)",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		TorIsolation: binary.New(meta.Data{
			Option:  "torisolation",
			Aliases: []string{"TI"},
			Group:   "proxy",
			Label:   "Tor Isolation",
			Description:
			"makes a separate proxy connection for each connection",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		TrickleInterval: duration.New(meta.Data{
			Option:  "trickleinterval",
			Aliases: []string{"TKI"},
			Group:   "policy",
			Label:   "Trickle Interval",
			Description:
			"minimum time between attempts to send new inventory to a connected peer",
			Widget: "duration",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultTrickleInterval,
		),
		TxIndex: binary.New(meta.Data{
			Option:  "txindex",
			Aliases: []string{"TXI"},
			Group:   "node",
			Label:   "Tx Index",
			Description:
			"maintain a full hash-based transaction index which makes all transactions available via the getrawtransaction RPC",
			Widget: "toggle",
			// Hook:        "droptxindex",
			OmitEmpty: true,
		},
			false,
		),
		UPNP: binary.New(meta.Data{
			Option:  "upnp",
			Aliases: []string{"UP"},
			Group:   "node",
			Label:   "UPNP",
			Description:
			"enable UPNP for NAT traversal",
			Widget: "toggle",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			false,
		),
		UserAgentComments: list.New(meta.Data{
			Option:  "uacomment",
			Aliases: []string{"UA"},
			Group:   "policy",
			Label:   "User Agent Comments",
			Description:
			"comment to add to the user agent -- See BIP 14 for more information",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{},
		),
		Username: text.New(meta.Data{
			Option:  "username",
			Aliases: []string{"UN"},
			Group:   "rpc",
			Label:   "Username",
			Description:
			"password for client RPC connections",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"username",
		),
		UUID: &integer.Opt{Data: meta.Data{
			Option: "uuid",
			Label:  "UUID",
			Description:
			"instance unique id (64bit random value)",
			Widget:    "string",
			OmitEmpty: true,
		},
			Value: uberatomic.NewInt64(rand.Int63()),
		},
		UseWallet: binary.New(meta.Data{
			Aliases: []string{"WC"},
			Group:   "debug",
			Label:   "Connect to Wallet",
			Description:
			"set ctl to connect to wallet instead of chain server",
			Widget:    "toggle",
			OmitEmpty: true,
		},
			false,
		),
		WalletFile: text.New(meta.Data{
			Option:  "walletfile",
			Aliases: []string{"WF"},
			Group:   "config",
			Label:   "Wallet File",
			Description:
			"wallet database file",
			Type:   "path",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			filepath.Join(string(datadir.Load().([]byte)), "mainnet", opts.DbName),
		),
		WalletOff: binary.New(meta.Data{
			Option:  "walletoff",
			Aliases: []string{"WO"},
			Group:   "debug",
			Label:   "Wallet Off",
			Description:
			"turn off the wallet backend",
			Widget: "toggle",
			// Hook:        "wallet",
			OmitEmpty: true,
		},
			false,
		),
		WalletPass: text.New(meta.Data{
			Option:  "walletpass",
			Aliases: []string{"WPW"},
			Label:   "Wallet Pass",
			Description:
			"password encrypting public data in wallet - hash is stored so give on command line",
			Type:   "password",
			Widget: "password",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			"",
		),
		WalletRPCListeners: list.New(meta.Data{
			Option:  "walletrpclisten",
			Aliases: []string{"WRL"},
			Group:   "wallet",
			Label:   "Wallet RPC Listeners",
			Description:
			"addresses for wallet RPC server to listen on",
			Type:   "address",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{net.JoinHostPort("0.0.0.0",
				chaincfg.MainNetParams.WalletRPCServerPort,
			),
			},
		),
		WalletRPCMaxClients: integer.New(meta.Data{
			Option:  "walletrpcmaxclients",
			Aliases: []string{"WRMC"},
			Group:   "wallet",
			Label:   "Legacy RPC Max Clients",
			Description:
			"maximum number of RPC clients allowed for wallet RPC",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultRPCMaxClients,
		),
		WalletRPCMaxWebsockets: integer.New(meta.Data{
			Option:  "walletrpcmaxwebsockets",
			Aliases: []string{"WRMWS"},
			Group:   "wallet",
			Label:   "Legacy RPC Max Websockets",
			Description:
			"maximum number of websocket clients allowed for wallet RPC",
			Widget: "integer",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			opts.DefaultRPCMaxWebsockets,
		),
		WalletServer: text.New(meta.Data{
			Option:  "walletserver",
			Aliases: []string{"WS"},
			Group:   "wallet",
			Label:   "Wallet Server",
			Description:
			"node address to connect wallet server to",
			Type:   "address",
			Widget: "string",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			net.JoinHostPort("127.0.0.1",
				chaincfg.MainNetParams.WalletRPCServerPort,
			),
		),
		Whitelists: list.New(meta.Data{
			Option:  "whitelists",
			Aliases: []string{"WL"},
			Group:   "debug",
			Label:   "Whitelists",
			Description:
			"peers that you don't want to ever ban",
			Type:   "address",
			Widget: "multi",
			// Hook:        "restart",
			OmitEmpty: true,
		},
			[]string{},
		),
	}
	// check sanity of configuration
	// I.S(c.getAllOptionStrings())
	return
}
